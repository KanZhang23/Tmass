#ifndef NPSTAT_BANDWIDTHGCVPSEUDOLOGLIND_HH_
#define NPSTAT_BANDWIDTHGCVPSEUDOLOGLIND_HH_

/*!
// \file BandwidthGCVPseudoLogliND.hh
//
// \brief Cross-validating multivariate density estimates of grouped data
//        by optimizing regularized pseudo log-likelihood
//
// Author: I. Volobouev
//
// June 2015
*/

#include "npstat/stat/AbsBandwidthGCV.hh"

namespace npstat {
    /**
    // Class for calculating KDE or LOrPE cross-validation pseudo log
    // likelihood, for multivariate density estimates
    */
    template<typename Num, class Array>
    class BandwidthGCVPseudoLogliND : public AbsBandwidthGCVND<Num,Array>
    {
    public:
        /**
        // Parameter "regularizationPower" is used to limit the contributions
        // into the overall pseudo log likelihood from points for which the
        // "leaving one out" density is very low. For those points, instead
        // of "leaving one out" density, we will use the density generated by
        // that point itself divided by pow(N, regularizationPower). This
        // method limits the effect of tails on bandwidth determination.
        */
        explicit BandwidthGCVPseudoLogliND(double regularizationPower=0.5)
            : renormPow_(regularizationPower), nonZeroCount_(0), renormCount_(0) {}

        inline virtual ~BandwidthGCVPseudoLogliND() {}

        inline unsigned long getNonZeroCount() const {return nonZeroCount_;}
        inline unsigned long getRenormCount() const {return renormCount_;}

        // Unweighted samples
        virtual double operator()(
            const HistoND<Num>& histo,
            const Array& densityEstimate,
            const Array& looEstimate,
            const AbsPolyFilterND& filterUsed) const;

        // Weighted samples
        virtual double operator()(
            const HistoND<Num>& histo,
            double effectiveSampleSize,
            const Array& densityEstimate,
            const Array& looEstimate,
            const AbsPolyFilterND& filterUsed) const;

    private:
        double renormPow_;
        mutable unsigned long nonZeroCount_;
        mutable unsigned long renormCount_;
    };
}

#include "npstat/stat/BandwidthGCVPseudoLogliND.icc"

#endif // NPSTAT_BANDWIDTHGCVPSEUDOLOGLIND_HH_
