#ifndef NPSTAT_BANDWIDTHGCVPSEUDOLOGLI1D_HH_
#define NPSTAT_BANDWIDTHGCVPSEUDOLOGLI1D_HH_

/*!
// \file BandwidthGCVPseudoLogli1D.hh
//
// \brief Cross-validating one-dimensional density estimates of grouped data
//        by optimizing regularized pseudo log-likelihood
//
// Author: I. Volobouev
//
// June 2015
*/

#include "npstat/stat/AbsBandwidthGCV.hh"

namespace npstat {
    /**
    // Class for calculating KDE or LOrPE cross-validation pseudo
    // log-likelihood, for 1-dimensional density estimates. This class
    // is intended for use inside degree and/or bandwidth scans.
    */
    template<typename Numeric, typename Num2>
    class BandwidthGCVPseudoLogli1D : public AbsBandwidthGCV1D<Numeric,Num2>
    {
    public:
        /**
        // Parameter "regularizationPower" is used to limit the contributions
        // into the overall pseudo log likelihood from points for which the
        // "leaving one out" density is very low. For those points, instead
        // of "leaving one out" density, we will use the density generated by
        // that point itself divided by pow(N, regularizationPower). This
        // method limits the effect of tails on bandwidth determination.
        */
        inline explicit BandwidthGCVPseudoLogli1D(double regularizationPower=0.5)
            : renormPow_(regularizationPower), nonZeroCount_(0), renormCount_(0) {}

        inline virtual ~BandwidthGCVPseudoLogli1D() {}

        inline unsigned long getNonZeroCount() const {return nonZeroCount_;}
        inline unsigned long getRenormCount() const {return renormCount_;}

        // Unweighted samples
        virtual double operator()(
            const HistoND<Numeric>& histo,
            const Num2* densityEstimate,
            const Num2* leaveOneOutEstimate,
            unsigned lenEstimate,
            const AbsPolyFilter1D& filterUsed) const;

        // Weighted samples
        virtual double operator()(
            const HistoND<Numeric>& histo,
            double effectiveSampleSize,
            const Num2* densityEstimate,
            const Num2* leaveOneOutEstimate,
            unsigned lenEstimate,
            const AbsPolyFilter1D& filterUsed) const;

    private:
        double renormPow_;
        mutable unsigned long nonZeroCount_;
        mutable unsigned long renormCount_;
    };
}

#include "npstat/stat/BandwidthGCVPseudoLogli1D.icc"

#endif // NPSTAT_BANDWIDTHGCVPSEUDOLOGLI1D_HH_
