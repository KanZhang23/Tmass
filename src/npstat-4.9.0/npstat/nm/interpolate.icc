#include <stdexcept>

namespace npstat {
    template<typename T>
    unsigned interpolation_coefficients(T* buffer, const unsigned bufLen,
                                        const T& f0, const T& f1)
    {
        if (bufLen <= 1U) throw std::invalid_argument(
            "In npstat::interpolation_coefficients: "
            "insufficient length of the output buffer");
        buffer[0] = f0;
        buffer[1] = f1 - f0;
        return 2U;
    }

    template<typename T>
    unsigned interpolation_coefficients(T* buffer, const unsigned bufLen,
                                        const T& f0, const T& f1, const T& f2)
    {
        if (bufLen <= 2U) throw std::invalid_argument(
            "In npstat::interpolation_coefficients: "
            "insufficient length of the output buffer");
        buffer[0] = f0;
        buffer[1] = static_cast<T>((f1 - f2 + 3*(f1 - f0))/2.0);
        buffer[2] = static_cast<T>(((f0 - f1) + (f2 - f1))/2.0);
        return 3U;
    }

    template<typename T>
    unsigned interpolation_coefficients(T* buffer, const unsigned bufLen,
                                        const T& f0, const T& f1,
                                        const T& f2, const T& f3)
    {
        if (bufLen <= 3U) throw std::invalid_argument(
            "In npstat::interpolation_coefficients: "
            "insufficient length of the output buffer");
        buffer[0] = f0;
        buffer[1] = static_cast<T>((11*(f1 - f0)+7*(f1 - f2)+2*(f3 - f2))/6.0);
        buffer[2] = static_cast<T>((2*(f0 - f1)+3*(f2 - f1)+(f2 - f3))/2.0);
        buffer[3] = static_cast<T>(((f3 - f0) + 3*(f1 - f2))/6.0);
        return 4U;
    }
}
