#include <cmath>
#include <cassert>
#include <stdexcept>

namespace npstat {
    template<typename Precise>
    template<typename Precise2>
    MultivariateSumsqAccumulator<Precise>::MultivariateSumsqAccumulator(
        const unsigned long* columns, unsigned nColumns,
        const MultivariateSumAccumulator<Precise2>& sums)
        : sumsq_(nColumns*(nColumns+1UL)/2UL),
          mean_(nColumns),
          indexMap_(columns, columns+nColumns),
          count_(0),
          nCols_(sums.dim()),
          mapLen_(nColumns)
    {
        if (!nCols_) throw std::invalid_argument(
            "In npstat::MultivariateSumsqAccumulator constructor: "
            "can not use uninitialized MultivariateSumAccumulator input");
        if (!nColumns) throw std::invalid_argument(
            "In npstat::MultivariateSumsqAccumulator constructor: "
            "empty column map");
        assert(columns);
        for (unsigned i=0; i<nColumns; ++i)
            // The "mean" function will check if index is out of range
            mean_[i] = sums.mean(columns[i]);
    }

    template<typename Precise>
    template<typename Precise2>
    MultivariateSumsqAccumulator<Precise>::MultivariateSumsqAccumulator(
        const MultivariateSumAccumulator<Precise2>& sums)
        : sumsq_(sums.dim()*(sums.dim()+1UL)/2UL),
          mean_(sums.dim()),
          indexMap_(sums.dim()),
          count_(0),
          nCols_(sums.dim()),
          mapLen_(nCols_)
    {
        if (!nCols_) throw std::invalid_argument(
            "In npstat::MultivariateSumsqAccumulator constructor: "
            "can not use uninitialized MultivariateSumAccumulator input");
        for (unsigned i=0; i<mapLen_; ++i)
        {
            indexMap_[i] = i;
            mean_[i] = sums.mean(i);
        }
    }

    template<typename Precise>
    inline const Precise& MultivariateSumsqAccumulator<Precise>::sumsq(
        const unsigned i, const unsigned j) const
    {
        if (!(i < mapLen_ && j < mapLen_)) throw std::out_of_range(
            "In npstat::MultivariateSumsqAccumulator::sumsq: "
            "index out of range");
        return j <= i ? sumsq_[i*(i+1UL)/2UL+j] : sumsq_[j*(j+1UL)/2UL+i];
    }

    template<typename Precise>
    inline Precise MultivariateSumsqAccumulator<Precise>::cov(
        const unsigned i, const unsigned j) const
    {
        if (!count_) throw std::runtime_error(
            "In npstat::MultivariateSumsqAccumulator::cov: "
            "no data accumulated");
        return count_ > 1UL ? sumsq(i, j)/(count_ - 1UL) : Precise();
    }

    template<typename Precise>
    inline Precise MultivariateSumsqAccumulator<Precise>::stdev(
        const unsigned i) const
    {
        const Precise& cv = cov(i, i);
        if (cv > Precise())
            return std::sqrt(cv);
        else
            return Precise();
    }

    template<typename Precise>
    template<typename T>
    void MultivariateSumsqAccumulator<Precise>::accumulate(
        const T* data, const unsigned long len)
    {
        if (len != nCols_) throw std::invalid_argument(
            "In npstat::MultivariateSumsqAccumulator::accumulate: "
            "incompatible data length");
        assert(data);
        Precise* buf = &sumsq_[0];
        const Precise* mean = &mean_[0];
        const unsigned long* map = &indexMap_[0];
        for (unsigned i=0; i<mapLen_; ++i)
        {
            const Precise idelta = data[map[i]] - mean[i];
            for (unsigned j=0; j<=i; ++j, ++buf)
                *buf += idelta*(data[map[j]] - mean[j]);
        }
        ++count_;
    }

    template<typename Precise>
    inline Precise MultivariateSumsqAccumulator<Precise>::corr(
        const unsigned i, const unsigned j) const
    {
        if (!count_) throw std::runtime_error(
            "In npstat::MultivariateSumsqAccumulator::corrSafe: "
            "no data accumulated");
        if (i == j)
            return static_cast<Precise>(1);
        const Precise& zero = Precise();
        if (count_ == 1UL)
            return zero;
        const Precise& si = sumsq_[i*(i+1UL)/2UL+i];
        const Precise& sj = sumsq_[j*(j+1UL)/2UL+j];
        if (!(si > zero && sj > zero))
            return zero;
        Precise cr = sumsq(i, j)/(std::sqrt(si)*std::sqrt(sj));
        if (cr < static_cast<Precise>(-1))
            cr = static_cast<Precise>(-1);
        else if (cr > static_cast<Precise>(1))
            cr = static_cast<Precise>(1);
        return cr;
    }

    template<typename Precise>
    Matrix<Precise> MultivariateSumsqAccumulator<Precise>::covMat() const
    {
        if (!count_) throw std::runtime_error(
            "In npstat::MultivariateSumsqAccumulator::covMat: "
            "no data accumulated");
        const unsigned long cntm1 = count_ - 1UL;
        if (cntm1)
        {
            const Precise* buf = &sumsq_[0];
            Matrix<Precise> m(mapLen_, mapLen_);
            Precise* mdata = const_cast<Precise*>(m.data());
            for (unsigned long i=0; i<mapLen_; ++i)
            {
                for (unsigned long j=0; j<i; ++j, ++buf)
                {
                    mdata[i*mapLen_+j] = *buf/cntm1;
                    mdata[j*mapLen_+i] = mdata[i*mapLen_+j];
                }
                mdata[i*mapLen_+i] = *buf++/cntm1;
            }
            return m;
        }
        else
            return Matrix<Precise>(mapLen_, mapLen_, 0);
    }

    template<typename Precise>
    Matrix<Precise> MultivariateSumsqAccumulator<Precise>::corrMat() const
    {
        if (!count_) throw std::runtime_error(
            "In npstat::MultivariateSumsqAccumulator::corrMat: "
            "no data accumulated");
        const unsigned long cntm1 = count_ - 1UL;
        if (cntm1)
        {
            const Precise& zero = Precise();
            const Precise* buf = &sumsq_[0];
            Matrix<Precise> m(mapLen_, mapLen_);
            Precise* mdata = const_cast<Precise*>(m.data());

            // Calculate the square roots first
            for (unsigned long i=0; i<mapLen_; ++i)
            {
                const Precise& diagTerm = buf[i*(i+1UL)/2UL+i];
                mdata[(mapLen_-1U)*mapLen_ + i] = diagTerm <= zero ? 
                    zero : std::sqrt(diagTerm);
            }

            for (unsigned long i=0; i<mapLen_; ++i)
            {
                const Precise& sqi = mdata[(mapLen_-1U)*mapLen_ + i];
                for (unsigned long j=0; j<i; ++j, ++buf)
                {
                    const unsigned long ij = i*mapLen_+j;
                    const Precise& sqj = mdata[(mapLen_-1U)*mapLen_+j];
                    if (sqi > zero && sqj > zero)
                    {
                        mdata[ij] = *buf/sqi/sqj;
                        if (mdata[ij] < static_cast<Precise>(-1))
                            mdata[ij] = static_cast<Precise>(-1);
                        else if (mdata[ij] > static_cast<Precise>(1))
                            mdata[ij] = static_cast<Precise>(1);
                    }
                    else
                        mdata[ij] = zero;
                    mdata[j*mapLen_+i] = mdata[ij];
                }
                mdata[i*mapLen_+i] = static_cast<Precise>(1);
                ++buf;
            }
            return m;
        }
        else
            return Matrix<Precise>(mapLen_, mapLen_, 1);
    }

    template<typename Precise>
    void MultivariateSumsqAccumulator<Precise>::reset()
    {
        const Precise& zero = Precise();
        const unsigned long len = sumsq_.size();
        Precise* buf = &sumsq_[0];
        for (unsigned long i=0; i<len; ++i)
            buf[i] = zero;
        count_ = 0;
    }
}
