test ntuple_c_count-1.1 {ntuple row counting without "-unique" option} {} {
    set id [hs::create_ntuple [next_uid] "Test ntuple" "tests" {a b}]
    for {set i 0} {$i < 1000} {incr i} {
	hs::fill_ntuple $id [list [expr rand()] [expr rand()]]
    }
    set i [hs::ntuple_c_count $id {a > b}]
    set j [lindex [hs::ntuple_c_stats $id {a > b} 1] 0]
    expr {$i == $j}
} {1}

test ntuple_c_count-1.2 {ntuple row counting with "-unique" option} {} {
    set id [hs::create_ntuple [next_uid] "Test ntuple" "tests" {a b c}]
    hs::ntuple_block_fill $id [list \
	     1 2 1\
             5 8 1\
             7 6 1\
             8 5 1\
             3 4 1\
             5 2 1\
             6 1 1\
             7 6 2\
    ]
    hs::ntuple_c_count $id {a > b} -unique [list {a + b} c]
} {3}

test ntuple_c_search-1.1 {ntuple search without "-unique" option} {} {
    set id [hs::create_ntuple [next_uid] "Test ntuple" "tests" {a b}]
    set list2 {}
    for {set i 0} {$i < 1000} {incr i} {
        set a [expr rand()]
        set b [expr rand()]
        if {$a > $b} {
            lappend list2 $i
        }
	hs::fill_ntuple $id [list $a $b]
    }
    set list1 [hs::ntuple_c_search $id {a > b}]
    string equal $list1 $list2
} {1}

test ntuple_c_search-1.2 {ntuple search with "-unique" option} {} {
    set id [hs::create_ntuple [next_uid] "Test ntuple" "tests" {a b c}]
    hs::ntuple_block_fill $id [list \
	     1 2 1\
             5 8 1\
             7 6 1\
             8 5 1\
             3 4 1\
             5 2 1\
             6 1 1\
             7 6 2\
    ]
    hs::ntuple_c_search $id {a > b} -unique [list {a + b} c]
} {2 5 7}

test ntuple_c_search-1.3 {reverse ntuple search with "-unique" option} {} {
    set id [hs::create_ntuple [next_uid] "Test ntuple" "tests" {a b c}]
    hs::ntuple_block_fill $id [list \
	     1 2 1\
             5 8 1\
             7 6 1\
             8 5 1\
             3 4 1\
             5 2 1\
             6 1 1\
             7 6 2\
    ]
    hs::ntuple_c_search -reverse 1 $id {a > b} -unique [list {a + b} c]
} {3 6 7}

catch {unset id}
catch {unset i}
catch {unset j}
catch {unset a}
catch {unset b}
catch {unset list1}
catch {unset list2}
hs::delete_category "..."

::tcltest::cleanupTests
return
