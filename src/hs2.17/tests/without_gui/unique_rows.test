test unique_rows-1.1 {test of hs::unique_rows command} {} {
    set id1 [hs::create_ntuple [next_uid] "Test ntuple 1" "tests" {a b c}]
    set id2 [hs::create_ntuple [next_uid] "Unique row ntuple" "tests" {a b c}]
    set id3 [hs::create_ntuple [next_uid] "Unique row 2" "tests" {a b c}]
    hs::ntuple_block_fill $id1 [list \
	    2 3 4\
            2 1 7\
            4 6 8\
	    2 3 4\
            1 3 12\
            2 1 6\
            1 3 12\
            2 1 7\
	    1 1 11\
            4 6 8\
	    1 1 11\
    ]
    hs::ntuple_block_fill $id2 [list \
	    2 3 4\
            2 1 7\
            4 6 8\
            1 3 12\
            2 1 6\
	    1 1 11\
    ]
    hs::ntuple_block_fill $id3 [list \
	    2 3 4\
            4 6 8\
            1 3 12\
    ]
    set id4 [hs::unique_rows [next_uid] "Test ntuple 1" "tests" $id1 {}]
    verify_similarity $id1 $id4 0
    set id4 [hs::unique_rows [next_uid] "Unique row ntuple" "tests" \
            $id1 [hs::ntuple_variable_list $id1]]
    verify_similarity $id2 $id4 0
    set id4 [hs::unique_rows [next_uid] "Unique row 2" "tests" $id1 {a}]
    verify_similarity $id3 $id4 0
} {}

test unique_rows-1.2 {test of hs::unique_rows with single-variable ntuple} {} {
    set id1 [hs::create_ntuple [next_uid] "Test ntuple 1" "tests" {a}]
    set id2 [hs::create_ntuple [next_uid] "Unique row ntuple" "tests" {a}]
    hs::ntuple_block_fill $id1 [list 1 2 3 4 5 0 2 6 3 7 0 1 8 9]
    hs::ntuple_block_fill $id2 [list 1 2 3 4 5 0 6 7 8 9]
    set id3 [hs::unique_rows [next_uid] "Test ntuple 1" "tests" $id1 {}]
    verify_similarity $id1 $id3 0
    set id3 [hs::unique_rows [next_uid] "Unique row ntuple" "tests" $id1 {a}]
    verify_similarity $id2 $id3 0
} {}

catch {unset id1}
catch {unset id2}
catch {unset id3}
catch {unset id4}
hs::delete_category "..."
::tcltest::cleanupTests
return
